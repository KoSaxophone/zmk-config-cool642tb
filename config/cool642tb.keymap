#include <behaviors.dtsi>
#include <input/processors.dtsi>   /* ← 追加：Temporary Layer を使う */
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        esc {
            bindings = <&kp LS(ESCAPE)>;
            key-positions = <0 1>;
        };

        ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <22 23>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <34 35>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        lclk {
            bindings = <&mkp LCLK>;
            key-positions = <18 19>;
        };

        rclk {
            bindings = <&mkp RCLK>;
            key-positions = <19 20>;
        };

        spacel {
            bindings = <&kp SPACE>;
            key-positions = <39 38>;
        };

        spacer {
            bindings = <&kp SPACE>;
            key-positions = <40 41>;
        };

        tabctrlshift {
            bindings = <&kp LS(LC(TAB))>;
            key-positions = <0 10 22>;
        };

        pageup {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <1 2 3>;
        };

        pagedown {
            bindings = <&msc SCRL_UP>;
            key-positions = <35 36 37>;
        };

        pageright {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <14 26 38>;
        };

        pageleft {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <34 22 10>;
        };

        english {
            bindings = <&kp LANG2>;
            key-positions = <26 27>;
        };

        japanese {
            bindings = <&kp LANG1>;
            key-positions = <28 29>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W      &kp E             &kp R         &kp T                                                               &kp Y          &kp U  &kp I      &kp O       &kp P
&kp A           &kp S      &kp D             &kp F         &kp G              &kp LG(LS(NUMBER_4))    &kp MINUS                &kp H          &kp J  &kp K      &kp L       &kp ENTER
&kp Z           &kp X      &kp C             &kp V         &kp B              &lt 4 LEFT_PARENTHESIS  &lt 3 RIGHT_PARENTHESIS  &kp N          &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_COMMAND  &kp LEFT_ALT  &kp LC(LG(SPACE))  &mo 2                   &mo 1                    &kp BACKSPACE                                &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        shortcut {
            bindings = <
&kp F1         &kp F2     &kp F3             &kp F4     &kp F5                                      &kp F6             &kp F7          &kp F8         &kp F9            &kp F10
&kp LS(LG(Z))  &kp LG(S)  &kp DOUBLE_QUOTES  &kp LG(F)  &kp COLON  &kp LG(LS(L))   &kp UNDERSCORE   &kp LEFT           &kp DOWN_ARROW  &kp UP_ARROW   &kp RIGHT         &kp ENTER
&kp LG(Z)      &kp LG(X)  &kp LG(C)          &kp LG(V)  &kp B      &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LC(SPACE)      &kp RG(SPACE)   &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION
&kp N1         &kp N2     &kp LCTRL          &kp GRAVE  &kp SQT    &mo 2           &to 1            &kp DOUBLE_QUOTES                                                   &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        symbol {
            bindings = <
&kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH      &kp DOLLAR  &kp PERCENT                                       &kp AMPERSAND      &kp SQT  &kp EQUAL      &kp TILDE         &kp PIPE
&kp EXCLAMATION  &kp AT_SIGN        &kp HASH      &kp DOLLAR  &kp PERCENT  &kp LG(LS(N5))    &kp UNDERSCORE     &kp SLASH          &kp N4   &kp N5         &kp N6            &kp ENTER
&kp PLUS         &kp MINUS          &kp ASTERISK  &kp SLASH   &kp EQUAL    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp ASTERISK       &kp N1   &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION
&bt BT_PRV       &bt BT_NXT         &bt BT_SEL 0  &kp GRAVE   &kp SQT      &mo 2             &mo 1              &kp DOUBLE_QUOTES                                            &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp LG(LEFT_BRACKET) LG(RIGHT_BRACKET)>;
        };

        ARROW {
            bindings = <
&kp UP_ARROW    &kp UP_ARROW    &kp UP_ARROW    &kp UP_ARROW     &kp UP_ARROW                                    &kp Y              &kp U  &kp I      &kp O       &kp P
&kp LEFT_ARROW  &kp LEFT_ARROW  &kp UP_ARROW    &kp RIGHT_ARROW  &kp RIGHT_ARROW  &kp LG(LS(M))  &kp UNDERSCORE  &kp H              &kp J  &kp K      &kp L       &kp ENTER
&kp LEFT_ARROW  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RIGHT_ARROW  &mo 4          &mo 3           &kp N              &kp M  &kp COMMA  &kp PERIOD  &kp BACKSLASH
&kp DOWN_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW   &kp DOWN_ARROW   &mo 2          &mo 1           &kp DOUBLE_QUOTES                                &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp LG(LEFT_ARROW) LG(RIGHT_ARROW)>;
        };

        number {
            bindings = <
&none   &none   &none   &none   &none                                   &none         &none  &none  &none  &none
&kp A   &kp S   &kp D   &kp F   &kp G   &kp LS(LG(N1))  &kp UNDERSCORE  &kp SLASH     &none  &none  &none  &kp ENTER
&kp Z   &kp X   &kp C   &kp V   &kp B   &mo 4           &mo 3           &none         &none  &none  &none  &kp N0
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp N6          &kp N7          &kp NUMBER_8                       &kp N9
            >;

            sensor-bindings = <&inc_dec_kp LG(C_BRIGHTNESS_DEC) LG(C_BRIGHTNESS_INC)>;
        };
    };
};

/* ==== Auto Mouse Layer: Temporary Layer 設定（最小） ==== */
/* 打鍵直後はAMLを起動させない（誤発動抑制）。まず 200ms から調整 */
&zip_temp_layer {
    require-prior-idle-ms = <200>;
    /* 必要になったら、以下に “即解除” したいキーの位置番号を追加する
       例）excluded-positions = <18 19 21 34>;   // J,K,;,Ctrl など */
};

/* トラックボール入力中だけ MOUSE(=4) をON。無入力 200ms で自動解除 */
&trackball_listener {
    input-processors = <&zip_temp_layer MOUSE 200>;
}
