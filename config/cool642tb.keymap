#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 10>;
        };

        esc {
            bindings = <&kp LS(ESCAPE)>;
            key-positions = <0 1>;
        };

        ctrl {
            bindings = <&kp LCTRL>;
            key-positions = <22 23>;
        };

        shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <34 35>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <20 21>;
        };

        lclk {
            bindings = <&mkp LCLK>;
            key-positions = <18 19>;
        };

        rclk {
            bindings = <&mkp RCLK>;
            key-positions = <19 20>;
        };

        spacel {
            bindings = <&kp SPACE>;
            key-positions = <39 38>;
        };

        spacer {
            bindings = <&kp SPACE>;
            key-positions = <40 41>;
        };

        tabctrlshift {
            bindings = <&kp LS(LC(TAB))>;
            key-positions = <0 10 22>;
        };

        pageup {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <1 2 3>;
        };

        pagedown {
            bindings = <&msc SCRL_UP>;
            key-positions = <35 36 37>;
        };

        pageright {
            bindings = <&msc SCRL_LEFT>;
            key-positions = <14 26 38>;
        };

        pageleft {
            bindings = <&msc SCRL_RIGHT>;
            key-positions = <34 22 10>;
        };

        english {
            bindings = <&kp LANG2>;
            key-positions = <26 27>;
        };

        japanese {
            bindings = <&kp LANG1>;
            key-positions = <28 29>;
        };

        tabctrl {
            bindings = <&kp LC(TAB)>;
            key-positions = <11 23>;
        };

        cmdright {
            bindings = <&kp LG(RIGHT_ARROW)>;
            key-positions = <36 42>;
        };

        cmdleft {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <36 40>;
        };

        pagedown2 {
            bindings = <&msc SCRL_UP>;
            key-positions = <38 37 36>;
        };

        pagedown3 {
            bindings = <&msc SCRL_UP>;
            key-positions = <38 39 37>;
        };

        pageup2 {
            bindings = <&msc SCRL_DOWN>;
            key-positions = <4 3 2>;
        };

        english2 {
            bindings = <&kp LANG2>;
            key-positions = <25 26>;
        };

        japanese2 {
            bindings = <&kp LANG1>;
            key-positions = <29 30>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W      &kp E             &kp R         &kp T                                                         &kp Y        &kp U  &kp I      &kp O       &mt MINUS P
&kp A           &kp S      &kp D             &kp F         &kp G            &kp LG(LS(NUMBER_4))  &kp MINUS              &kp H        &kp J  &kp K      &kp L       &kp ENTER
&kp Z           &kp X      &kp C             &kp V         &kp B            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_COMMAND  &kp LEFT_ALT  &lt 4 SEMICOLON  &lt 2 SPACE           &lt 1 BACKSPACE        &lt 3 COLON                                &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        shortcutfunction {
            bindings = <
&kp F1                &kp F2          &kp F3             &kp F4        &kp F5                                                   &kp F6     &kp F7  &kp F8  &kp F9  &kp MINUS
&kp LG(A)             &kp LG(LS(Z))   &kp D              &kp LG(F)     &kp G            &kp LG(LS(L))          &kp UNDERSCORE   &kp PLUS   &kp F4  &kp F5  &kp F6  &kp ENTER
&kp LG(Z)             &kp LG(X)       &kp LG(C)          &kp LG(V)     &kp B            &kp LEFT_BRACE         &kp RIGHT_BRACE  &kp EQUAL  &kp F1  &kp F2  &kp F3  &kp QUESTION
&kp LG(LEFT_BRACKET)  &kp LEFT_ARROW  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp RIGHT_ARROW  &kp LG(RIGHT_BRACKET)  &to 1            &kp N0                             &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        symbol {
            bindings = <
&kp EXCLAMATION       &kp DOUBLE_QUOTES  &kp HASH           &kp DOLLAR    &kp PERCENT                                           &kp AMPERSAND  &kp SQT       &kp TILDE      &kp GRAVE         &kp UNDERSCORE
&kp A                 &kp S              &kp D              &kp F         &kp G            &kp LG(LS(N5))    &kp PIPE           &kp PLUS       &kp N4        &kp N5         &kp N6            &kp ENTER
&kp Z                 &kp X              &kp C              &kp V         &kp B            &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp EQUAL      &kp NUMBER_1  &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION
&kp LG(LEFT_BRACKET)  &kp LEFT_ARROW     &kp C_VOLUME_DOWN  &kp C_VOL_UP  &kp RIGHT_ARROW  &mo 2             &kp BACKSPACE      &kp N0                                                        &kp BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp LG(LEFT_BRACKET) LG(RIGHT_BRACKET)>;
        };

        arrow {
            bindings = <
&kp F1          &kp UP_ARROW    &kp UP_ARROW    &kp UP_ARROW    &kp F5                                             &kp F6     &kp F7  &kp F8  &kp F9  &kp MINUS
&kp LEFT_ARROW  &kp LG(LS(Z))   &kp D           &kp LG(F)       &kp RIGHT_ARROW  &kp LS(LG(M))    &kp UNDERSCORE   &kp PLUS   &kp F4  &kp F5  &kp F6  &kp ENTER
&kp LEFT_ARROW  &kp LG(X)       &kp LG(C)       &kp LG(V)       &kp RIGHT_ARROW  &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp EQUAL  &kp F1  &kp F2  &kp F3  &kp QUESTION
&kp DOWN_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW   &kp RIGHT_ARROW  &kp BACKSPACE    &mo 3                              &kp AT_SIGN
            >;

            sensor-bindings = <&inc_dec_kp LA(LG(MINUS)) LA(LG(SEMICOLON))>;
        };

        number {
            bindings = <
&kp N1                &kp N2          &kp N3             &kp N4        &kp N5                                            &kp N6     &kp N7  &kp N8  &kp N9  &kp N0
&kp A                 &kp S           &kp D              &kp F         &kp G   &kp LS(LG(D))          &kp PIPE           &kp PLUS   &kp N4  &kp N5  &kp N6  &kp ENTER
&kp Z                 &kp X           &kp C              &kp V         &kp B   &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp EQUAL  &kp N1  &kp N2  &kp N3  &kp QUESTION
&kp LG(LEFT_BRACKET)  &kp LEFT_ARROW  &kp C_VOLUME_DOWN  &kp C_VOL_UP  &mo 4   &kp LG(RIGHT_BRACKET)  &kp BACKSPACE      &kp N0                             &kp ASTERISK
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };
    };
};
